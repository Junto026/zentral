name: Build & Publish Zentral to GHCR

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *"   # daily at 07:35 UTC; adjust as desired

# Keep default token minimal; the job will request only what it needs.
permissions:
  contents: read
  packages: write

env:
  # Where your images will be published
  GHCR_IMAGE: ghcr.io/junto026/zentral
  # Upstream repo to track
  UPSTREAM: zentralopensource/zentral

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Determine latest upstream tag
        id: latest
        run: |
          set -euo pipefail
          TAG=$(curl -fsSL "https://api.github.com/repos/${UPSTREAM}/releases/latest" | jq -r .tag_name)
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
            # Fallback: newest annotated tag if Releases aren't used
            TAG=$(git ls-remote --tags "https://github.com/${UPSTREAM}.git" \
                  | awk -F/ '{print $3}' | grep -v '{}' | sort -V | tail -1)
          fi
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
            echo "Could not determine latest upstream tag" >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Latest upstream tag: $TAG"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip if this tag already exists in GHCR
        id: exist
        continue-on-error: true
        run: docker manifest inspect "${GHCR_IMAGE}:${{ steps.latest.outputs.tag }}"

      - name: Checkout upstream source at that tag
        if: steps.exist.outcome != 'success'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM }}
          ref: ${{ steps.latest.outputs.tag }}

      - name: Set up Buildx
        if: steps.exist.outcome != 'success'
        uses: docker/setup-buildx-action@v3

      - name: Build & push image
        if: steps.exist.outcome != 'success'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ steps.latest.outputs.tag }}
            ${{ env.GHCR_IMAGE }}:latest
          provenance: false
  build-scepserver:
    name: Build & push scepserver
    runs-on: ubuntu-latest
  
    permissions:
      contents: read
      packages: write
  
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Compute tags
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/zentral-scepserver"
          SHA_TAG="${IMAGE}:sha-${GITHUB_SHA::7}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            REF_TAG="${IMAGE}:${GITHUB_REF_NAME}"
          else
            REF_TAG="${IMAGE}:latest"
          fi
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tags=${SHA_TAG},${REF_TAG}" >> $GITHUB_OUTPUT
  
      - name: Build & push from upstream Zentral (scepserver)
        uses: docker/build-push-action@v6
        with:
          # NOTE: context points to the subdir that contains Dockerfile + openssl.conf + entrypoint
          # Syntax: https://github.com/ORG/REPO.git#REF:SUBDIR
          context: https://github.com/zentralopensource/zentral.git#main:conf/common/docker/scepserver
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.image }}:buildcache
          cache-to: type=registry,ref=${{ steps.meta.outputs.image }}:buildcache,mode=max

